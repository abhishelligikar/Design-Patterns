Singleton

The Singleton is a creational pattern that ensures a class has at most one instance and provides a global point of access to this instance.

Motivation
Let's say we are developing software for an office. In an effort to save costs, there is one high-performance printer which receives all of the print requests.

Given that there's only one printer and a constant inflow of documents, it's crucial to have a system that queues these print jobs. All computers should see the same queue state. Requests must be handled on a first-come, first-serve basis.

At any given time, from any computer, a user should be able to view the printer's status, such as online, offline, or out of paper.

Most importantly, if one user changes settings, like switching from color to grayscale, this should be consistent for all users.

The question from a software engineering perspective is that how do we ensure multiple computers don't try to manage the queue independently, which would not only result in repetitive connection attempts but also multiple states?

We want a solution that's light on computational resources yet robust in design. The printer's state should be consistent and consistently accessible across all computers. Let's look at a candidate solution.

1. Basic PrintService with Multiple Instances

Suppose we designed a straightforward PrintService class. Any computer could create an instance when it needs to print or check the printer status like shown below.

public class PrintService {
    private Queue<Document> printQueue = new LinkedList<>();

    public void sendDocument(Document doc) {
        printQueue.add(doc);
        printNext();
    }

    public PrinterStatus getPrinterStatus() {
        // Check printer and return its status
    }

    private void printNext() {
        // Logic to send the next document from the queue to the printer
    }
}

With the above code, any computer can create as many instances of its own PrintService.

The problem becomes evident when Jim, from accounting, sets the printer to grayscale mode. Now, Dwight, from sales, sends a document expecting a color print, but ends up with a grayscale output.

The issue: multiple instances of the PrintService result in inconsistent status' seen by consumers of this service.

The Solution: The Singleton pattern can provide a centralized approach to handle this scenario.

The solution
The singleton pattern can ensure that the PrinterService class can only be instantiated once, which ensures consistency across the office printing scenario.

The singleton makes use of a private constructor. This way, we restrict the instantiation of the class to be within the class.

In other words, the only way to instantiate this class now is through a public static method within the class. This not only ensures a single instance, but also provides a global point of access to this instance. This now means that when Jim sets the printer to grayscale, it reflects on not only Dwight's screen, but also everyone else's. There is now a single source of truth.

This design decision opens the door to lazy instantiation. What does this mean?

Instead of creating an instance upfront, the object is instantiated only when needed. This approach resonates with the YAGNI principle (You aren't gonna need it).

In some cases delaying instantiation can expedite the application's startup time. For example, there's no need to initialize a database until it's genuinely required.

The beauty of lazy instantiation is twofold: sometimes, we might not need to create the object altogether if it's unnecessary. At other times, it offers the flexibility to postpone resource-intensive tasks until the system is less encumbered.

C# provides a default public constructor for every single class, without any arguments. However, as soon as we define any other constructor for the class, the compiler will no longer be able to detect the default one. This is the key to preventing direct instantiation. This means the only way to get an instance is now through a public method.
Design and Implementation
The singleton pattern typically contains the following components:

1. Singleton Class - This is the class which ensures that only a single instance is ever created. It contains:

A private static variable of its own type to hold the single instance.
Often dubbed uniqueInstance, this component preserves the sole instance of the Singleton. Initialized to null, it only gets its assignment when the getInstance() method is invoked for the first time.
The private constructor which restricts public instantiation from outside.
By setting the constructor to private, we ensure that the Singleton class remains "uninstantiable" outside its bounds. This limitation is the bedrock of the Singleton pattern's "one instance" rule.
A public static method, typically named getInstance(), which returns the unique instance of the class.
This method acts as the gateway to the Singleton's exclusive instance. It checks if uniqueInstance is null; if so, it instantiates it. Otherwise, it simply returns the pre-existing instance, maintaining that at most one instance of the Singleton class permeates the system.
It should be noted that the only way for the client to be able to interact with the Singleton is through the getInstance() method. This ensures that getInstance() is the only way of getting the Singleton object.
Conceptually, the singleton can be visualized like the following:

UML template diagram of our singleton pattern.(Please refer Singleton_UML image)

When we apply the above to our scenario, below is the UML class diagram and the code implementation.

singleton-scenario (Please refer Singleton_UML1 image)

class PrinterService {

  private static volatile PrinterService uniqueInstance = null;

  private String mode = null;

  private PrinterService() {
    this.mode = "GrayScale";
  }

  public static PrinterService getInstance() {
    if (uniqueInstance == null) {
      synchronized (PrinterService.class) {
        if (uniqueInstance == null) {
          uniqueInstance = new PrinterService();
        }
      }
    }
    return uniqueInstance;
  }

  public String getPrinterStatus() {
    return mode;
  }

  public void setMode(String mode) {
    this.mode = mode;
    System.out.println("Mode changed to " + mode);
  }
}
class Client {

  public static void main(String[] args) {
    PrinterService worker1 = PrinterService.getInstance();
    PrinterService worker2 = PrinterService.getInstance();

    worker1.setMode("Color");
    worker2.setMode("Grayscale");

    String worker1Mode = worker1.getPrinterStatus();
    String worker2Mode = worker2.getPrinterStatus();

    System.out.println(worker1Mode); //
    System.out.println(worker2Mode);
  }
}
Limitations and Pitfalls
1. Violation of the Single Responsibility Principle

The singleton pattern introduces an additional responsibility to a class: managing its own instantiation. This class now has to do its primary job and also ensure there's only one instance of itself.

This coupling of concerns can be seen as a violation of the Single Responsibility Principle, which also leads to tight coupling.

2. Difficulty in Unit Testing

Because the singleton carries a state which persists for the lifetime of the application, it can lead to bugs when performing unit testing.

Unit tests are supposed to be isolated tests, testing specific parts of the application and one test should not have any adverse effects on the other tests. If one test changes the singleton's state, it could inadvertently affect other tests as well, breaking the principle of unit testing.

3. Global Scope

Singletons are often used to provide a global point of access to a resource in an application. The state of the singleton can also be modified from anywhere in the application, making it difficult to track down where the state was changed.

For this reason, singletons are often referred to as an anti-pattern.

Use Cases
1. Configuration Manager

Many applications and even operating systems require a centralized place to manage configuration settings. Whether these settings are loaded from a file, a database, or an external service, we often want a single point of access to this configuration throughout the application.

A Singleton Configuration Manager ensures that configuration data is loaded only once.

2. Connection Pool

In systems that interact with databases, network services, or other resources, creating and destroying connections repeatedly can be resource-intensive and slow. Connection pools manage and reuse a set of open connections.

Singletons can be used to ensure that connections are managed centrally, optimizing resource usage.

3. Logging Service

Logging is a common requirement in many applications for tracking events, errors, or informational messages. Having a centralized logger can help manage log destinations, formats, and levels.

A Singleton ensures that all log messages are handled consistently and preventing potential issues like multiple log files or duplicated log entries. It also optimizes performance by
reusing resources like file handles or network connections.

4. Hardware Interface Access

This one goes back to our printer example. It's crucial to coordinate access to prevent conflicts or unexpected behavior.

Using a Singleton to represent and manage access to the hardware ensures that all interactions are coordinated through a single access point. This can prevent issues like sending multiple simultaneous commands to a device, which might cause malfunctions or erratic behavior.

Closing Notes
The singleton pattern effectively helps us achieve the following:

1. Reduced memory usage

By creating only one instance of the class, we reduce the overall memory usage of the application. This way, we avoid allocating and deallocating memory for multiple objects of the same type, reducing garbage collection overhead.

2. We are guaranteed one instance

Because there is only a single point of access, we ensure that every class that uses the Singleton uses the same instance that is instantiated by all the other classes before it. If needed, we can implement concurrency controls to ensure that there are no data inconsistencies.